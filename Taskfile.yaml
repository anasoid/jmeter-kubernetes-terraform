version: "3"
vars:
  worker_count: 2
  jmx_file: "basic-plan.jmx"
  kubernetes_namespace: "jmeter"
  timeout: "7200"
  input_folder: "../test/project"
  output_folder: "../out"
  install_plugins: "true"
  install_list_plugins: ""
  skip_get_logs_workers: "false"
  virtual_users: 3
  with_logstash: false
  with_jmx: false
  elastic_host: "http://localhost"
  project_name: "myproject"
  env_name: "myenv"
  test_name: "global"
  exec_name: ""

env:
  TF_VAR_JMETER_WORKERS_COUNT: "{{.worker_count}}"
  TF_VAR_JMETER_CONF_EXEC_TIMEOUT: "{{.timeout}}"
  TF_VAR_namespace: "{{.kubernetes_namespace}}"
  TF_VAR_JMETER_JMX_FILE: "{{.jmx_file}}"
  TF_VAR_JMETER_PIPELINE_CLI_ARGUMENTS: " -Jglobal.execution.users={{ .virtual_users }}  "
  TF_VAR_JMETER_PLUGINS_MANAGER_INSTALL_FOR_JMX: "{{.install_plugins}}"
  TF_VAR_JMETER_PLUGINS_MANAGER_INSTALL_LIST: "{{.install_list_plugins}}"
  TF_VAR_JMETER_CONF_CSV_SPLIT_PATTERN: "**_split.csv"
  TF_VAR_JMETER_CONF_CSV_DIVIDED_TO_OUT: "false"
  TF_VAR_JMETER_PROPERTIES_FILES: ""
  LOCAL_JMETER_DIRECTORY_INPUT: "{{.input_folder}}"
  LOCAL_JMETER_DIRECTORY_OUTPUT: "{{.output_folder}}"
  TF_VAR_WITH_LOGSTASH: "{{.with_logstash}}"
  TF_VAR_WITH_JOLOKIA: "{{.with_jmx}}"
  TF_VAR_LOGSTASH_ELASTICSEARCH_HOSTS: "{{.elastic_host}}"
  TF_VAR_METRICBEAT_ELASTICSEARCH_HOSTS: "{{.elastic_host}}"
  TF_VAR_PROJECT_NAME: "{{.project_name}}"
  TF_VAR_ENVIRONMENT_NAME: "{{.env_name}}"
  TF_VAR_TEST_NAME: "{{.test_name}}"
  TF_VAR_EXECUTION_ID: "{{.exec_name}}"

output: prefixed

tasks:
  main-task:
    desc: main task
    cmds:
      - task: prepare
      - task: copy-project
      - task: wait-test-follow
      - task: stop-metricbeat 
      - task: check-jmeter-exitcode
      - task: get-result-controller
      - task: display-pod-logs
      - task: get-logs-workers
      - task: wait-logstash

  validate:
    desc: validate Terraform
    dir: ./terraform
    cmds:
      - terraform validate

  prepare:
    desc: apply Terraform
    dir: ./terraform
    deps: [validate]
    cmds:
      - terraform apply  -auto-approve -input=false -lock=false

  copy-project:
    cmds:
      - task: copy-project-workers
      - task: wait-workers-ready
      - task: copy-project-controller

  copy-project-workers:
    desc: copy project to
    dir: ./terraform
    cmds:
      - |
        PROJECT_FOLDER=$LOCAL_JMETER_DIRECTORY_INPUT
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        WORKER_NAMES=$(terraform output --raw jmeter_workers_names)
        echo "Start Copying Project"
        echo "-----------------------------------------------------------------------------------------------------------------------------"

        for instance in $WORKER_NAMES; do
            echo "-----------------------------------------------------------------------------------------------------------------------------"
            echo "Copy Project to pod : $instance"
            echo "kubectl cp -n $NAME_SPACE $PROJECT_FOLDER $instance:/jmeter -c jmeter"
            kubectl cp -v 0 -n $NAME_SPACE -c jmeter $PROJECT_FOLDER $instance:/jmeter 
        done
        echo "End Copying Project"

  wait-workers-ready:
    desc: Wait workers to be ready.
    dir: ./terraform
    cmds:
      - |
        NAME_SPACE=$(terraform output --raw namespace)
        WORKER_NAMES=$(terraform output --raw jmeter_workers_names)
        allNodeReady="false"
        while [ $allNodeReady == "false" ]; do
          allNodeReady="true"
          for instance in  $WORKER_NAMES; do
            status=$(kubectl get pods -n $NAME_SPACE $instance -o=jsonpath='{.status.containerStatuses[0].state}' | jq -j '. | to_entries | .[] | "\(.key)"') 
            started=$(kubectl get pods -n $NAME_SPACE $instance -o=jsonpath='{.status.containerStatuses[0].started}' ) 
            
            if [ "$status" == "running" ]; then
              if [ "$started" != "true" ]; then
                echo "$(date): Waiting $instance -> status:$status , started:$started"
                allNodeReady="false"
              fi
            else
              echo "$(date): $instance -> status:$status , started:$started"
              echo "ERROR-> worker $instance ($status) is not running "  
              exit 1
            fi
          done
          echo "$(date): Waiting workers to be ready"
          sleep 10
        done

  copy-project-controller:
    desc: copy project to
    dir: ./terraform
    cmds:
      - |
        PROJECT_FOLDER=$LOCAL_JMETER_DIRECTORY_INPUT
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        WORKER_NAMES=$(terraform output --raw jmeter_workers_names)
        echo "Start Copying Project"
        echo "-----------------------------------------------------------------------------------------------------------------------------"

        for instance in  $CONTROLLER_NAME; do
            echo "-----------------------------------------------------------------------------------------------------------------------------"
            echo "Copy Project to pod : $instance"
            echo "kubectl cp -n $NAME_SPACE $PROJECT_FOLDER $instance:/jmeter -c jmeter"
            kubectl cp -v 0 -n $NAME_SPACE -c jmeter $PROJECT_FOLDER $instance:/jmeter 
        done
        echo "End Copying Project"

  wait-test-follow:
    desc: wait test to finish using follow
    dir: ./terraform
    cmds:
      - |
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        echo "$(date): Started!"
        kubectl logs -n $NAME_SPACE -c jmeter -f $CONTROLLER_NAME
        echo "$(date): End!"

  wait-test:
    desc: wait test to finish
    dir: ./terraform
    cmds:
      - |
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        echo "$(date): Started!"
        while [ $(kubectl get pods -n $NAME_SPACE $CONTROLLER_NAME -o=jsonpath='{.status.containerStatuses[0].state}' | jq -j '. | to_entries | .[] | "\(.key)"') == "running" ]; do
          echo "$(date): Still Running...$CONTROLLER_NAME"
          sleep 20
        done
        echo "$(date): End!"

  stop-metricbeat:
    desc: stop metricbeat pod
    dir: ./terraform
    cmds:
      - |
        if [ "{{.with_jmx}}" != "false"  ]; then
          NAME_SPACE=$(terraform output --raw namespace)
          METRICBEAT_NAME=$(terraform output --raw metricbeat_name)
          echo "Start stop  metricbeat"
           kubectl exec -n $NAME_SPACE  $METRICBEAT_NAME -- ps -aux
           metricpid=$(kubectl exec -n $NAME_SPACE  $METRICBEAT_NAME -- pidof metricbeat)
           echo "Killing  metricbeat($metricpid)"
           kubectl exec -n $NAME_SPACE  $METRICBEAT_NAME -- kill -15 $metricpid
          echo "End stop metricbeat"
        else
          echo "Skip tasks : stop-metricbeat"
        fi

  check-jmeter-exitcode:
    desc: copy project to
    dir: ./terraform
    cmds:
      - |
        PROJECT_FOLDER=$LOCAL_JMETER_DIRECTORY_INPUT
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        WORKER_NAMES=$(terraform output --raw jmeter_workers_names)
        echo "-----------------------------------------------------------------------------------------------------------------------------"

        for instance in $CONTROLLER_NAME $WORKER_NAMES ; do
          exitcode=$(kubectl get pods -n $NAME_SPACE $instance -o=jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')
          echo "Pod $instance exitcode : $exitcode"
          if [[ "$exitcode" != "0" ]]; then
            echo "ERROR exitcode :  $exitcode"
            exit 1
          fi
        done

  display-pod-logs:
    desc: copy project to
    dir: ./terraform
    cmds:
      - |
        PROJECT_FOLDER=$LOCAL_JMETER_DIRECTORY_INPUT
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        WORKER_NAMES=$(terraform output --raw jmeter_workers_names)
        echo "Start Copying Project"
        echo "-----------------------------------------------------------------------------------------------------------------------------"

        for instance in $CONTROLLER_NAME $WORKER_NAMES ; do
            echo "-----------------------------------------------------------------------------------------------------------------------------"
            echo "Display logs : $instance"
            echo "kubectl logs -n $NAME_SPACE -c jmeter $instance "
            kubectl logs -n $NAME_SPACE -c jmeter $instance | ts "[$instance] " 
        done
        echo "End Copying Project"

  get-result-controller:
    desc: get result from controller.
    dir: ./terraform
    cmds:
      - |
        mkdir -p $LOCAL_JMETER_DIRECTORY_OUTPUT
        NAME_SPACE=$(terraform output --raw namespace)
        CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
        echo "Start get Result"
        echo "-----------------------------------------------------------------------------------------------------------------------------"

        for instance in $CONTROLLER_NAME; do
            echo "-----------------------------------------------------------------------------------------------------------------------------"
            echo "get Result from pod : $instance"
            echo "kubectl cp -v 0 -n $NAME_SPACE -c keepalive $instance:/jmeter/out  $LOCAL_JMETER_DIRECTORY_OUTPUT "
            kubectl cp -v 0 -n $NAME_SPACE -c keepalive $instance:/jmeter/out  $LOCAL_JMETER_DIRECTORY_OUTPUT 
        done
        echo "Start get Result"

  get-logs-workers:
    desc: get logs from workers
    dir: ./terraform
    cmds:
      - |
        if [ "{{.skip_get_logs_workers}}" == "false"  ]; then
          NAME_SPACE=$(terraform output --raw namespace)
          WORKER_NAMES=$(terraform output --raw jmeter_workers_names)
          echo "Start get Result"

          for instance in $WORKER_NAMES; do
              echo "get Result from pod : $instance"
              echo "kubectl cp -v 0 -n $NAME_SPACE -c keepalive $instance:/jmeter/out  $LOCAL_JMETER_DIRECTORY_OUTPUT "
              kubectl cp -v 0 -n $NAME_SPACE -c keepalive $instance:/jmeter/out  $LOCAL_JMETER_DIRECTORY_OUTPUT 
          done
          echo "End get Result"
        else
          echo "Skip tasks : get logs workers"
        fi

  wait-logstash:
    desc: wait logstash to finish
    dir: ./terraform
    cmds:
      - |
        if [ "{{.with_logstash}}" == "true"  ]; then
          NAME_SPACE=$(terraform output --raw namespace)
           CONTROLLER_NAME=$(terraform output --raw jmeter_controller_name)
           echo " kubectl exec -n $NAME_SPACE -c logstash    $CONTROLLER_NAME -- curl -s 'localhost:9600/_node/stats/events?pretty' "
           
           last_status="-1"

          
           for ((i = 0 ; i <= 100 ; i++)); do
             status=$( kubectl exec -n $NAME_SPACE -c logstash    $CONTROLLER_NAME -- curl -s 'localhost:9600/_node/stats/events' | grep -oP '"out":\K(\d+)') 
              echo "Logstash message out number: -> $status"
              if [ "$last_status" == "$status" ]; then
                echo "Logstash finished with ($status) messages"
                break;
              else
                last_status=$status
                echo "Logstash ($i iterations) waiting to finish all message $status ..."
                sleep 5
              fi
              done

        else
          echo "Skip tasks : wait logstash"
        fi
  destroy:
    desc: destroy Terraform
    dir: ./terraform
    ignore_error: true
    cmds:
      - terraform destroy -auto-approve -input=false -lock=false
